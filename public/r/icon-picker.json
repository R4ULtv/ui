{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-picker",
  "type": "registry:block",
  "title": "Icon Picker",
  "description": "A simple icon picker component.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "input",
    "scroll-area"
  ],
  "files": [
    {
      "path": "registry/icon-picker/icon-picker.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { icons } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useDebounce } from \"@/hooks/use-debounce\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\n\r\nconst IconItem = React.memo(\r\n  ({\r\n    iconName,\r\n    setSelectedIcon,\r\n    selectedIcon,\r\n  }: {\r\n    iconName: string;\r\n    setSelectedIcon?: (iconName: string) => void;\r\n    selectedIcon?: string | null;\r\n  }) => {\r\n    const Icon = icons[iconName as keyof typeof icons];\r\n\r\n    const handleClick = React.useCallback(() => {\r\n      setSelectedIcon?.(iconName);\r\n    }, [iconName, setSelectedIcon]);\r\n\r\n    return (\r\n      <button\r\n        className={cn(\r\n          \"flex items-center justify-center size-7 rounded-md cursor-pointer text-popover-foreground/70 hover:bg-muted hover:text-popover-foreground transition-colors\",\r\n          selectedIcon === iconName &&\r\n            \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground\",\r\n        )}\r\n        onClick={handleClick}\r\n        title={iconName}\r\n        aria-label={`Select ${iconName} icon`}\r\n        aria-pressed={selectedIcon === iconName}\r\n      >\r\n        <Icon size={16} />\r\n      </button>\r\n    );\r\n  },\r\n);\r\n\r\nIconItem.displayName = \"IconItem\";\r\n\r\nconst IconPicker = React.memo(\r\n  ({\r\n    setSelectedIcon,\r\n    selectedIcon,\r\n    className,\r\n    ...props\r\n  }: {\r\n    setSelectedIcon?: (iconName: string) => void;\r\n    selectedIcon?: string | null;\r\n  } & React.ComponentProps<\"div\">) => {\r\n    const [searchQuery, setSearchQuery] = React.useState(\"\");\r\n    const debouncedSearchQuery = useDebounce(searchQuery, 200);\r\n\r\n    const iconsMap = React.useMemo(() => Object.keys(icons), []);\r\n\r\n    const filteredIcons = React.useMemo(() => {\r\n      if (!debouncedSearchQuery.trim()) return iconsMap;\r\n      return iconsMap.filter((iconName) =>\r\n        iconName.toLowerCase().includes(debouncedSearchQuery.toLowerCase()),\r\n      );\r\n    }, [iconsMap, debouncedSearchQuery]);\r\n\r\n    const handleSearchChange = React.useCallback(\r\n      (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchQuery(e.target.value);\r\n      },\r\n      [],\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          \"max-w-72 bg-popover rounded-lg border shadow-md\",\r\n          className,\r\n        )}\r\n        aria-label=\"Icon picker\"\r\n        {...props}\r\n      >\r\n        <div className=\"relative mt-1.5 mx-1.5\">\r\n          <Input\r\n            autoComplete=\"off\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize=\"off\"\r\n            spellCheck={false}\r\n            className=\"border-none focus-visible:ring-2 font-semibold px-2.5 py-2 min-w-0 md:min-w-[252px]\"\r\n            placeholder=\"Search...\"\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={handleSearchChange}\r\n            aria-label=\"Search icons\"\r\n          />\r\n        </div>\r\n        <ScrollArea className=\"h-60 md:h-80 p-1.5\">\r\n          <div\r\n            className=\"grid grid-cols-7 md:grid-cols-9\"\r\n            aria-label=\"Available icons\"\r\n          >\r\n            {filteredIcons.map((iconName) => (\r\n              <IconItem\r\n                key={iconName}\r\n                iconName={iconName}\r\n                setSelectedIcon={setSelectedIcon}\r\n                selectedIcon={selectedIcon}\r\n              />\r\n            ))}\r\n          </div>\r\n        </ScrollArea>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nIconPicker.displayName = \"IconPicker\";\r\n\r\nexport default IconPicker;\r\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-debounce.ts",
      "content": "import * as React from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay || 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
      "type": "registry:hook"
    }
  ]
}