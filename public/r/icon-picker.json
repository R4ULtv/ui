{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-picker",
  "type": "registry:block",
  "title": "Icon Picker",
  "description": "A simple icon picker component.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "input",
    "scroll-area"
  ],
  "files": [
    {
      "path": "registry/icon-picker/icon-picker.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { icons } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nconst IconItem = React.memo(\n  ({\n    iconName,\n    onSelectIcon,\n    selectedIcon,\n  }: {\n    iconName: string;\n    onSelectIcon?: (iconName: string) => void;\n    selectedIcon?: string | null;\n  }) => {\n    const Icon = icons[iconName as keyof typeof icons];\n\n    const handleClick = React.useCallback(() => {\n      onSelectIcon?.(iconName);\n    }, [iconName, onSelectIcon]);\n\n    return (\n      <button\n        className={cn(\n          \"flex items-center justify-center size-7 rounded-md cursor-pointer text-popover-foreground/75 hover:bg-muted hover:text-primary transition-colors\",\n          selectedIcon === iconName &&\n            \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground\",\n        )}\n        onClick={handleClick}\n        title={iconName}\n        aria-label={`Select ${iconName} icon`}\n        aria-pressed={selectedIcon === iconName}\n      >\n        <Icon size={16} />\n      </button>\n    );\n  },\n);\n\nIconItem.displayName = \"IconItem\";\n\nconst IconPicker = React.memo(\n  ({\n    onSelectIcon,\n    selectedIcon,\n    className,\n    ...props\n  }: {\n    onSelectIcon?: (iconName: string) => void;\n    selectedIcon?: string | null;\n  } & React.ComponentProps<\"div\">) => {\n    const [searchQuery, setSearchQuery] = React.useState(\"\");\n    const debouncedSearchQuery = useDebounce(searchQuery, 200);\n\n    const iconsMap = React.useMemo(() => Object.keys(icons), []);\n\n    const filteredIcons = React.useMemo(() => {\n      if (!debouncedSearchQuery.trim()) return iconsMap;\n      return iconsMap.filter((iconName) =>\n        iconName.toLowerCase().includes(debouncedSearchQuery.toLowerCase()),\n      );\n    }, [iconsMap, debouncedSearchQuery]);\n\n    const handleSearchChange = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchQuery(e.target.value);\n      },\n      [],\n    );\n\n    return (\n      <div\n        className={cn(\"w-72 bg-popover rounded-lg border shadow-md\", className)}\n        aria-label=\"Icon picker\"\n        {...props}\n      >\n        <div className=\"relative px-2 pt-2\">\n          <Input\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck={false}\n            className=\"border-none focus-visible:ring-2 font-semibold px-2.5 py-2\"\n            placeholder=\"Search...\"\n            type=\"text\"\n            value={searchQuery}\n            onChange={handleSearchChange}\n            aria-label=\"Search icons\"\n          />\n        </div>\n        <ScrollArea className=\"h-80 p-1.5\">\n          <div\n            className=\"grid grid-cols-9\"\n            role=\"listbox\"\n            aria-label=\"Available icons\"\n          >\n            {filteredIcons.map((iconName) => (\n              <IconItem\n                key={iconName}\n                iconName={iconName}\n                onSelectIcon={onSelectIcon}\n                selectedIcon={selectedIcon}\n              />\n            ))}\n          </div>\n        </ScrollArea>\n      </div>\n    );\n  },\n);\n\nIconPicker.displayName = \"IconPicker\";\n\nexport default IconPicker;\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-debounce.ts",
      "content": "import * as React from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay || 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
      "type": "registry:hook"
    }
  ]
}