{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-picker-multiple",
  "type": "registry:block",
  "title": "Icon Picker Multiple",
  "description": "A simple icon picker component with multiple selectable icons.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "input",
    "scroll-area",
    "button"
  ],
  "files": [
    {
      "path": "registry/icon-picker/icon-picker-multiple.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { icons, XIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\n\nconst IconItem = React.memo(\n  ({\n    iconName,\n    toggleSelectedIcon,\n    selectedIcons,\n  }: {\n    iconName: string;\n    toggleSelectedIcon?: (iconName: string) => void;\n    selectedIcons?: string[];\n  }) => {\n    const Icon = icons[iconName as keyof typeof icons];\n    const isSelected = selectedIcons?.includes(iconName);\n\n    const handleClick = React.useCallback(() => {\n      toggleSelectedIcon?.(iconName);\n    }, [iconName, toggleSelectedIcon]);\n\n    return (\n      <button\n        className={cn(\n          \"flex items-center justify-center size-7 rounded-md cursor-pointer text-popover-foreground/70 hover:bg-muted hover:text-popover-foreground transition-colors\",\n          isSelected &&\n            \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground\",\n        )}\n        onClick={handleClick}\n        title={iconName}\n        aria-label={`${isSelected ? \"Deselect\" : \"Select\"} ${iconName} icon`}\n        aria-pressed={isSelected}\n      >\n        <Icon size={16} />\n      </button>\n    );\n  },\n);\nIconItem.displayName = \"IconItem\";\n\nconst IconPicker = React.memo(\n  ({\n    setSelectedIcons,\n    selectedIcons = [],\n    className,\n    ...props\n  }: {\n    setSelectedIcons?: (iconNames: string[]) => void;\n    selectedIcons?: string[];\n  } & React.ComponentProps<\"div\">) => {\n    const [searchQuery, setSearchQuery] = React.useState(\"\");\n    const debouncedSearchQuery = useDebounce(searchQuery, 200);\n    const iconsMap = React.useMemo(() => Object.keys(icons), []);\n\n    const filteredIcons = React.useMemo(() => {\n      if (!debouncedSearchQuery.trim()) return iconsMap;\n      return iconsMap.filter((iconName) =>\n        iconName.toLowerCase().includes(debouncedSearchQuery.toLowerCase()),\n      );\n    }, [iconsMap, debouncedSearchQuery]);\n\n    const toggleSelectedIcon = React.useCallback(\n      (iconName: string) => {\n        if (!setSelectedIcons) return;\n\n        setSelectedIcons(\n          selectedIcons.includes(iconName)\n            ? selectedIcons.filter((name) => name !== iconName)\n            : [...selectedIcons, iconName],\n        );\n      },\n      [selectedIcons, setSelectedIcons],\n    );\n\n    const handleSearchChange = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchQuery(e.target.value);\n      },\n      [],\n    );\n\n    const handleClearSelection = React.useCallback(() => {\n      setSelectedIcons?.([]);\n    }, [setSelectedIcons]);\n\n    return (\n      <div\n        className={cn(\n          \"max-w-72 bg-popover rounded-lg border shadow-md\",\n          className,\n        )}\n        aria-label=\"Icon picker\"\n        {...props}\n      >\n        <div className=\"mt-1.5 mx-1.5 flex items-center gap-1.5 min-w-0 md:min-w-[252px]\">\n          <Input\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck={false}\n            className=\"border-none focus-visible:ring-2 font-semibold px-2.5 py-2 w-full\"\n            placeholder={\n              selectedIcons.length > 0\n                ? `Selected ${selectedIcons.length} icon${selectedIcons.length > 1 ? \"s\" : \"\"}...`\n                : \"Select an icon...\"\n            }\n            type=\"text\"\n            value={searchQuery}\n            onChange={handleSearchChange}\n            aria-label=\"Search icons\"\n          />\n          {selectedIcons.length > 0 && (\n            <Button\n              onClick={() => handleClearSelection()}\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"border-none focus-visible:ring-2\"\n            >\n              <XIcon />\n            </Button>\n          )}\n        </div>\n\n        <ScrollArea className=\"h-60 md:h-80 p-1.5\">\n          <div\n            className=\"grid grid-cols-7 md:grid-cols-9\"\n            aria-label=\"Available icons\"\n            aria-multiselectable=\"true\"\n          >\n            {filteredIcons.map((iconName) => (\n              <IconItem\n                key={iconName}\n                iconName={iconName}\n                toggleSelectedIcon={toggleSelectedIcon}\n                selectedIcons={selectedIcons}\n              />\n            ))}\n          </div>\n        </ScrollArea>\n      </div>\n    );\n  },\n);\nIconPicker.displayName = \"IconPicker\";\n\nexport default IconPicker;\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-debounce.ts",
      "content": "import * as React from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay || 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
      "type": "registry:hook"
    }
  ]
}