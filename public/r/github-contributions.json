{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "github-contributions",
  "type": "registry:block",
  "title": "GitHub Contributions",
  "description": "A basic GitHub contributions component.",
  "files": [
    {
      "path": "registry/github-contributions/github-contributions.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Constants\r\nconst WEEKDAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] as const;\r\nconst CONTRIBUTION_LEVEL_CLASSES = [\r\n  \"bg-github-0\",\r\n  \"bg-github-1\",\r\n  \"bg-github-2\",\r\n  \"bg-github-3\",\r\n  \"bg-github-4\",\r\n] as const;\r\n\r\n// Types\r\ntype ContributionLevel = 0 | 1 | 2 | 3 | 4;\r\n\r\nexport interface Contribution {\r\n  date: string;\r\n  count: number;\r\n  level: ContributionLevel;\r\n}\r\n\r\nexport interface DayContributionMap {\r\n  [key: number]: Contribution[];\r\n}\r\n\r\nexport interface ContributionCellProps {\r\n  contribution: Contribution;\r\n}\r\n\r\nconst ContributionCell = React.memo(function ContributionCell({\r\n  contribution,\r\n}: ContributionCellProps) {\r\n  const date = new Date(contribution.date);\r\n  const formattedDate = new Date(date).toLocaleString(\"en-US\", {\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n  });\r\n  const label = `${contribution.count} contributions on ${formattedDate}`;\r\n\r\n  return (\r\n    <td\r\n      role=\"gridcell\"\r\n      aria-label={label}\r\n      className={cn(\r\n        \"w-2.5 p-0 rounded-xs -outline-offset-1\",\r\n        CONTRIBUTION_LEVEL_CLASSES[contribution.level],\r\n      )}\r\n      title={label}\r\n    />\r\n  );\r\n});\r\n\r\nconst WeekdayLabel = React.memo(function WeekdayLabel({\r\n  day,\r\n}: {\r\n  day: number;\r\n}) {\r\n  return (\r\n    <td rowSpan={2} className=\"text-xs font-semibold pr-6 sm:pr-8 relative\">\r\n      <div className=\"absolute -top-1 -left-1\">{WEEKDAYS[day]}</div>\r\n    </td>\r\n  );\r\n});\r\n\r\nconst MonthLabel = React.memo(function MonthLabel({\r\n  date,\r\n  colSpan,\r\n}: {\r\n  date?: Date;\r\n  colSpan: number;\r\n}) {\r\n  if (!date) return <td colSpan={colSpan} />;\r\n  return (\r\n    <td\r\n      colSpan={colSpan}\r\n      className=\"text-xs font-semibold first-letter:uppercase\"\r\n    >\r\n      {new Date(date).toLocaleString(\"en-US\", { month: \"short\" })}\r\n    </td>\r\n  );\r\n});\r\n\r\nexport default function GitHubContributions({\r\n  data,\r\n}: {\r\n  data: Contribution[];\r\n}): React.JSX.Element {\r\n  const contributionsByDay = React.useMemo(() => {\r\n    return data.reduce<DayContributionMap>((acc, contribution) => {\r\n      const day = new Date(contribution.date).getDay();\r\n      if (!acc[day]) acc[day] = [];\r\n      acc[day].push(contribution);\r\n      return acc;\r\n    }, {});\r\n  }, [data]);\r\n\r\n  const monthLabels = React.useMemo(\r\n    () =>\r\n      data.reduce<(React.JSX.Element | null)[]>((acc, contribution, i) => {\r\n        const date = new Date(contribution.date);\r\n        const isStartOfWeek = i % 7 === 0;\r\n        const isWithinFirstWeekOfMonth =\r\n          date.getDate() >= 1 && date.getDate() <= 7;\r\n        const isBeforeLastWeek =\r\n          date < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\r\n\r\n        if (\r\n          i === 0 ||\r\n          (isStartOfWeek && isWithinFirstWeekOfMonth && isBeforeLastWeek)\r\n        ) {\r\n          const daysInMonth = new Date(\r\n            date.getFullYear(),\r\n            date.getMonth() + 1,\r\n            0,\r\n          ).getDate();\r\n          const remainingDays = daysInMonth - date.getDate();\r\n\r\n          acc[i] = (\r\n            <MonthLabel\r\n              key={i}\r\n              date={remainingDays > 14 ? date : undefined}\r\n              colSpan={\r\n                i === 0\r\n                  ? Math.ceil(remainingDays / 7)\r\n                  : remainingDays >= 28\r\n                    ? 5\r\n                    : 4\r\n              }\r\n            />\r\n          );\r\n        } else {\r\n          acc[i] = null;\r\n        }\r\n        return acc;\r\n      }, []),\r\n    [data],\r\n  );\r\n\r\n  const renderRow = React.useCallback(\r\n    (dayNum: number) => (\r\n      <tr key={dayNum} className=\"h-2.5\" role=\"row\">\r\n        {dayNum === 0 && <td />}\r\n        {dayNum % 2 === 1 && <WeekdayLabel day={dayNum} />}\r\n        {contributionsByDay[dayNum]?.map((contribution, index) => (\r\n          <ContributionCell key={index} contribution={contribution} />\r\n        ))}\r\n      </tr>\r\n    ),\r\n    [contributionsByDay],\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"overflow-x-auto max-w-full\"\r\n      role=\"region\"\r\n      aria-label=\"GitHub contributions calendar\"\r\n    >\r\n      <table\r\n        className=\"border-separate border-spacing-0.5 w-max mx-auto px-2 text-foreground\"\r\n        role=\"grid\"\r\n      >\r\n        <thead>\r\n          <tr role=\"row\">\r\n            <td />\r\n            {monthLabels}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{Array.from({ length: 7 }, (_, i) => renderRow(i))}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ],
  "cssVars": {
    "theme": {
      "--color-github-0": "var(--muted)"
    },
    "light": {
      "github-1": "oklch(0.87 0.1182 148.74)",
      "github-2": "oklch(0.73 0.1781 148.54)",
      "github-3": "oklch(0.63 0.157 148.35)",
      "github-4": "oklch(0.48 0.1122 150.02)"
    },
    "dark": {
      "github-1": "oklch(0.34 0.073 156.73)",
      "github-2": "oklch(0.47 0.126255 150.8624)",
      "github-3": "oklch(0.64 0.1777 146.24)",
      "github-4": "oklch(0.76 0.2121 145.62)"
    }
  }
}