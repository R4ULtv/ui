{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating-group-advanced",
  "type": "registry:block",
  "title": "Rating Group Advanced",
  "description": "Advanced rating group components with half-star, heart, read-only, and custom icon variants.",
  "registryDependencies": [
    "toggle-group"
  ],
  "files": [
    {
      "path": "registry/rating-group/rating-group-advanced.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { StarIcon, HeartIcon } from \"lucide-react\";\r\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface RatingGroupAdvancedProps {\r\n  value?: string;\r\n  onValueChange?: (value: string) => void;\r\n  max?: number;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  readOnly?: boolean;\r\n  size?: \"sm\" | \"default\" | \"lg\";\r\n  variant?: \"star\" | \"heart\";\r\n  allowHalf?: boolean;\r\n  emptyIcon?: React.ComponentType<{ className?: string }>;\r\n  filledIcon?: React.ComponentType<{ className?: string }>;\r\n  colors?: {\r\n    filled?: string;\r\n    empty?: string;\r\n    hover?: string;\r\n  };\r\n  allowClear?: boolean;\r\n}\r\n\r\nconst defaultColors = {\r\n  filled: \"fill-yellow-400 text-yellow-400\",\r\n  empty: \"text-muted-foreground/50\",\r\n  hover: \"text-yellow-300\",\r\n};\r\n\r\nconst iconVariants = {\r\n  star: StarIcon,\r\n  heart: HeartIcon,\r\n};\r\n\r\nfunction RatingGroupAdvanced({\r\n  value = \"0\",\r\n  onValueChange,\r\n  max = 5,\r\n  className,\r\n  disabled = false,\r\n  readOnly = false,\r\n  size = \"default\",\r\n  variant = \"star\",\r\n  allowHalf = false,\r\n  emptyIcon,\r\n  filledIcon,\r\n  colors = defaultColors,\r\n  allowClear = false,\r\n  ...props\r\n}: RatingGroupAdvancedProps) {\r\n  const [hoveredValue, setHoveredValue] = React.useState<number | null>(null);\r\n\r\n  const currentValue = React.useMemo(() => parseFloat(value || \"0\"), [value]);\r\n  const displayValue = hoveredValue ?? currentValue;\r\n\r\n  const EmptyIcon = emptyIcon || iconVariants[variant];\r\n  const FilledIcon = filledIcon || iconVariants[variant];\r\n\r\n  const indices = React.useMemo(\r\n    () => Array.from({ length: max }, (_, i) => i + 1),\r\n    [max],\r\n  );\r\n\r\n  const handleMouseEnter = React.useCallback(\r\n    (starValue: number, isHalf?: boolean) => {\r\n      if (!disabled && !readOnly) {\r\n        const finalValue = allowHalf && isHalf ? starValue - 0.5 : starValue;\r\n        setHoveredValue(finalValue);\r\n      }\r\n    },\r\n    [disabled, readOnly, allowHalf],\r\n  );\r\n\r\n  const handleMouseLeave = React.useCallback(() => {\r\n    setHoveredValue(null);\r\n  }, []);\r\n\r\n  const handleClick = React.useCallback(\r\n    (starValue: number, isHalf?: boolean) => {\r\n      if (!disabled && !readOnly && onValueChange) {\r\n        const finalValue = allowHalf && isHalf ? starValue - 0.5 : starValue;\r\n        const newValue =\r\n          allowClear && currentValue === finalValue\r\n            ? \"0\"\r\n            : finalValue.toString();\r\n        onValueChange(newValue);\r\n      }\r\n    },\r\n    [disabled, readOnly, onValueChange, allowHalf, allowClear, currentValue],\r\n  );\r\n\r\n  const getIconState = (index: number) => {\r\n    const value = displayValue;\r\n    if (value >= index) return \"filled\";\r\n    if (allowHalf && value >= index - 0.5) return \"half\";\r\n    return \"empty\";\r\n  };\r\n\r\n  const sizeClasses = {\r\n    sm: \"size-4\",\r\n    default: \"size-5\",\r\n    lg: \"size-6\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <ToggleGroup\r\n        type=\"single\"\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        size={size}\r\n        className={cn(\"gap-0\", className)}\r\n        disabled={disabled}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        {indices.map((index) => {\r\n          const starValue = index.toString();\r\n          const iconState = getIconState(index);\r\n\r\n          return (\r\n            <div key={starValue} className=\"relative\">\r\n              <ToggleGroupItem\r\n                value={starValue}\r\n                aria-label={`${index} rating`}\r\n                className={cn(\r\n                  \"relative border-0 bg-transparent p-0 hover:bg-transparent data-[state=on]:bg-transparent focus-visible:ring-0\",\r\n                  \"hover:scale-110 focus-visible:scale-110 transition-transform ease-out\",\r\n                  (disabled || readOnly) && \"pointer-events-none opacity-50\",\r\n                )}\r\n                onClick={() => handleClick(index)}\r\n                disabled={disabled || readOnly}\r\n              >\r\n                {allowHalf ? (\r\n                  <div className=\"relative\">\r\n                    <div\r\n                      className=\"absolute inset-0 w-1/2 z-10\"\r\n                      onMouseEnter={() => handleMouseEnter(index, true)}\r\n                    />\r\n                    <div\r\n                      className=\"absolute inset-0 left-1/2 w-1/2 z-10\"\r\n                      onMouseEnter={() => handleMouseEnter(index, false)}\r\n                    />\r\n                    <div className=\"relative\">\r\n                      {iconState === \"half\" ? (\r\n                        <div className=\"relative\">\r\n                          <EmptyIcon\r\n                            className={cn(\r\n                              \"transition-colors ease-out\",\r\n                              sizeClasses[size],\r\n                              colors.empty,\r\n                            )}\r\n                          />\r\n                          <div className=\"absolute inset-0 overflow-hidden w-1/2\">\r\n                            <FilledIcon\r\n                              className={cn(\r\n                                \"transition-colors ease-out\",\r\n                                sizeClasses[size],\r\n                                colors.filled,\r\n                              )}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        <FilledIcon\r\n                          className={cn(\r\n                            \"transition-colors ease-out\",\r\n                            sizeClasses[size],\r\n                            iconState === \"filled\"\r\n                              ? colors.filled\r\n                              : colors.empty,\r\n                          )}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div onMouseEnter={() => handleMouseEnter(index)}>\r\n                    <FilledIcon\r\n                      className={cn(\r\n                        \"transition-colors ease-out\",\r\n                        sizeClasses[size],\r\n                        iconState === \"filled\" ? colors.filled : colors.empty,\r\n                      )}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </ToggleGroupItem>\r\n            </div>\r\n          );\r\n        })}\r\n      </ToggleGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { RatingGroupAdvanced };\r\n",
      "type": "registry:component"
    }
  ]
}