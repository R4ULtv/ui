{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-picker-tanstack",
  "type": "registry:block",
  "title": "Icon Picker Virtualized",
  "description": "A simple icon picker component with virtualization.",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-virtual"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "path": "registry/icon-picker/icon-picker-tanstack.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { icons } from \"lucide-react\";\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/ui/input\";\n\nconst IconItem = React.memo(\n  ({\n    iconName,\n    onSelectIcon,\n    selectedIcon,\n  }: {\n    iconName: string;\n    onSelectIcon?: (iconName: string) => void;\n    selectedIcon?: string | null;\n  }) => {\n    const Icon = icons[iconName as keyof typeof icons];\n\n    const handleClick = React.useCallback(() => {\n      onSelectIcon?.(iconName);\n    }, [iconName, onSelectIcon]);\n\n    return (\n      <button\n        className={cn(\n          \"flex items-center justify-center size-7 rounded-md cursor-pointer text-popover-foreground/75 hover:bg-muted hover:text-primary\",\n          selectedIcon === iconName &&\n            \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground\",\n        )}\n        onClick={handleClick}\n        title={iconName}\n      >\n        <Icon size={16} />\n      </button>\n    );\n  },\n);\n\nIconItem.displayName = \"IconItem\";\n\nconst IconPicker = React.memo(\n  ({\n    onSelectIcon,\n    selectedIcon,\n    className,\n    ...props\n  }: {\n    onSelectIcon?: (iconName: string) => void;\n    selectedIcon?: string | null;\n  } & React.ComponentProps<\"div\">) => {\n    const [searchQuery, setSearchQuery] = React.useState(\"\");\n\n    const iconsMap = React.useMemo(() => Object.keys(icons), []);\n\n    const filteredIcons = React.useMemo(() => {\n      if (!searchQuery.trim()) return iconsMap;\n      return iconsMap.filter((iconName) =>\n        iconName.toLowerCase().includes(searchQuery.toLowerCase()),\n      );\n    }, [iconsMap, searchQuery]);\n\n    const handleSearchChange = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchQuery(e.target.value);\n      },\n      [],\n    );\n\n    const parentRef = React.useRef<HTMLDivElement>(null);\n\n    const ITEMS_PER_ROW = 9;\n    const totalRows = Math.ceil(filteredIcons.length / ITEMS_PER_ROW);\n\n    const rowVirtualizerForGrid = useVirtualizer({\n      count: totalRows,\n      getScrollElement: () => parentRef.current,\n      estimateSize: () => 28,\n      overscan: 5,\n    });\n\n    return (\n      <div\n        className={cn(\"w-72 bg-popover rounded-lg border shadow-md\", className)}\n        {...props}\n      >\n        <div className=\"relative px-2 pt-2\">\n          <Input\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck={false}\n            className=\"border-none focus-visible:ring-2 font-semibold px-2.5 py-2\"\n            placeholder=\"Search...\"\n            type=\"text\"\n            value={searchQuery}\n            onChange={handleSearchChange}\n          />\n        </div>\n        <div className=\"h-80 p-1.5\">\n          <div ref={parentRef} className=\"overflow-auto h-full w-full\">\n            <div\n              className=\"relative w-full\"\n              style={{ height: `${rowVirtualizerForGrid.getTotalSize()}px` }}\n            >\n              {rowVirtualizerForGrid\n                .getVirtualItems()\n                .map(\n                  (virtualRow: {\n                    index: number;\n                    size: number;\n                    start: number;\n                  }) => {\n                    const rowStartIndex = virtualRow.index * ITEMS_PER_ROW;\n                    const rowIcons = filteredIcons.slice(\n                      rowStartIndex,\n                      rowStartIndex + ITEMS_PER_ROW,\n                    );\n\n                    return (\n                      <div\n                        key={virtualRow.index}\n                        className=\"grid grid-cols-9 absolute top-0 left-0 w-full\"\n                        style={{\n                          height: `${virtualRow.size}px`,\n                          transform: `translateY(${virtualRow.start}px)`,\n                        }}\n                      >\n                        {rowIcons.map((iconName) => (\n                          <IconItem\n                            key={iconName}\n                            iconName={iconName}\n                            onSelectIcon={onSelectIcon}\n                            selectedIcon={selectedIcon}\n                          />\n                        ))}\n                      </div>\n                    );\n                  },\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nIconPicker.displayName = \"IconPicker\";\n\nexport default IconPicker;\n",
      "type": "registry:component"
    }
  ]
}