{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "search-bar-suggestions",
  "type": "registry:block",
  "title": "Search Bar Suggestions",
  "description": "Search bar featuring autosuggestions (Nuqs).",
  "dependencies": [
    "nuqs"
  ],
  "registryDependencies": [
    "command",
    "button"
  ],
  "files": [
    {
      "path": "registry/search-bar/search-bar-suggestions.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\n\r\nimport { useQueryState, parseAsString } from \"nuqs\";\r\nimport { Loader2Icon, SearchIcon, XIcon } from \"lucide-react\";\r\n\r\nimport { useDebounce } from \"@/hooks/use-debounce\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Code at https://github.com/R4ULtv/ui/tree/master/server/search-frameworks.tsx\r\nimport { searchFrameworks, Framework } from \"@/server/search-frameworks\";\r\n\r\nexport default function SearchBarSuggestions() {\r\n  const [query, setQuery] = useQueryState(\"framework\", parseAsString);\r\n  const [inputValue, setInputValue] = React.useState(query || \"\");\r\n  const debouncedInput = useDebounce(inputValue, 200);\r\n\r\n  const [suggestions, setSuggestions] = React.useState<Framework[]>([]);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n  const clearQuery = React.useCallback(() => {\r\n    setInputValue(\"\");\r\n    setQuery(null);\r\n    setSuggestions([]);\r\n  }, [setQuery]);\r\n\r\n  const handleInputChange = React.useCallback((value: string) => {\r\n    setInputValue(value);\r\n  }, []);\r\n\r\n  const handleSelect = React.useCallback(\r\n    (value: string) => {\r\n      setQuery(value);\r\n      setInputValue(value);\r\n    },\r\n    [setQuery],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!debouncedInput || debouncedInput.length < 2) {\r\n      setSuggestions([]);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    const getSuggestions = async () => {\r\n      if (debouncedInput && debouncedInput.length > 0) {\r\n        setIsLoading(true);\r\n        const data = await searchFrameworks(debouncedInput);\r\n        setSuggestions(data);\r\n        setIsLoading(false);\r\n      } else {\r\n        setSuggestions([]);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    getSuggestions();\r\n  }, [debouncedInput]);\r\n\r\n  return (\r\n    <Command\r\n      shouldFilter={false}\r\n      className=\"w-full max-w-[322px] bg-input/30 border\"\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"relative [&_div[data-slot='command-input-wrapper']]:h-10\",\r\n          suggestions.length > 0\r\n            ? \"[&_div[data-slot='command-input-wrapper']]:border-b\"\r\n            : \"[&_div[data-slot='command-input-wrapper']]:border-0\",\r\n        )}\r\n      >\r\n        <CommandInput\r\n          className=\"peer pe-9\"\r\n          placeholder=\"Search frameworks...\"\r\n          value={inputValue}\r\n          onValueChange={handleInputChange}\r\n          autoComplete=\"off\"\r\n          aria-label=\"Search input\"\r\n        />\r\n        {inputValue && (\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={clearQuery}\r\n            aria-label={isLoading ? \"Loading suggestions...\" : \"Clear search\"}\r\n            disabled={isLoading}\r\n            className=\"text-muted-foreground hover:text-foreground hover:bg-transparent dark:hover:bg-transparent absolute inset-y-0 end-0 h-full w-10 transition-colors\"\r\n          >\r\n            {isLoading ? (\r\n              <Loader2Icon\r\n                aria-hidden=\"true\"\r\n                className=\"animate-spin text-foreground\"\r\n              />\r\n            ) : (\r\n              <XIcon\r\n                aria-hidden=\"true\"\r\n                className=\"animate-in fade-in zoom-in-95\"\r\n              />\r\n            )}\r\n          </Button>\r\n        )}\r\n      </div>\r\n      {suggestions.length > 0 && (\r\n        <CommandList>\r\n          <CommandGroup heading=\"Suggestions\">\r\n            {suggestions.map((framework) => (\r\n              <CommandItem\r\n                key={framework.id}\r\n                value={framework.id}\r\n                onSelect={handleSelect}\r\n                className=\"flex flex-row items-center cursor-pointer\"\r\n              >\r\n                <span className=\"font-medium shrink-0\">{framework.name}</span>\r\n                <span className=\"text-xs text-muted-foreground truncate\">\r\n                  {framework.description}\r\n                </span>\r\n              </CommandItem>\r\n            ))}\r\n          </CommandGroup>\r\n        </CommandList>\r\n      )}\r\n    </Command>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-debounce.ts",
      "content": "import * as React from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay || 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
      "type": "registry:hook"
    }
  ]
}