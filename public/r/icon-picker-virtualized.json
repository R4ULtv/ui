{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-picker-virtualized",
  "type": "registry:block",
  "title": "Icon Picker Virtualized",
  "description": "A simple icon picker component with virtualization.",
  "dependencies": [
    "lucide-react",
    "react-virtualized"
  ],
  "devDependencies": [
    "@types/react-virtualized"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "path": "registry/icon-picker/icon-picker-virtualized.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { icons } from \"lucide-react\";\r\nimport { Grid, AutoSizer } from \"react-virtualized\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useDebounce } from \"@/hooks/use-debounce\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\nconst IconItem = React.memo(\r\n  ({\r\n    iconName,\r\n    setSelectedIcon,\r\n    selectedIcon,\r\n  }: {\r\n    iconName: string;\r\n    setSelectedIcon?: (iconName: string) => void;\r\n    selectedIcon?: string | null;\r\n  }) => {\r\n    const Icon = icons[iconName as keyof typeof icons];\r\n\r\n    const handleClick = React.useCallback(() => {\r\n      setSelectedIcon?.(iconName);\r\n    }, [iconName, setSelectedIcon]);\r\n\r\n    return (\r\n      <button\r\n        className={cn(\r\n          \"flex items-center justify-center size-7 rounded-md cursor-pointer text-popover-foreground/70 hover:bg-muted hover:text-popover-foreground transition-colors\",\r\n          selectedIcon === iconName &&\r\n            \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground\",\r\n        )}\r\n        onClick={handleClick}\r\n        title={iconName}\r\n        aria-label={`Select ${iconName} icon`}\r\n        aria-pressed={selectedIcon === iconName}\r\n      >\r\n        <Icon size={16} />\r\n      </button>\r\n    );\r\n  },\r\n);\r\n\r\nIconItem.displayName = \"IconItem\";\r\n\r\nconst IconPicker = React.memo(\r\n  ({\r\n    setSelectedIcon,\r\n    selectedIcon,\r\n    className,\r\n    ...props\r\n  }: {\r\n    setSelectedIcon?: (iconName: string) => void;\r\n    selectedIcon?: string | null;\r\n  } & React.ComponentProps<\"div\">) => {\r\n    const [searchQuery, setSearchQuery] = React.useState(\"\");\r\n    const debouncedSearchQuery = useDebounce(searchQuery, 200);\r\n    const gridRef = React.useRef<Grid | null>(null);\r\n\r\n    const iconsMap = React.useMemo(() => Object.keys(icons), []);\r\n\r\n    const filteredIcons = React.useMemo(() => {\r\n      if (!debouncedSearchQuery.trim()) return iconsMap;\r\n      return iconsMap.filter((iconName) =>\r\n        iconName.toLowerCase().includes(debouncedSearchQuery.toLowerCase()),\r\n      );\r\n    }, [iconsMap, debouncedSearchQuery]);\r\n\r\n    React.useEffect(() => {\r\n      if (gridRef.current) {\r\n        gridRef.current.recomputeGridSize();\r\n      }\r\n    }, [filteredIcons]);\r\n\r\n    const handleSearchChange = React.useCallback(\r\n      (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchQuery(e.target.value);\r\n      },\r\n      [],\r\n    );\r\n\r\n    const ICON_CELL_SIZE = 28;\r\n    const COLUMNS = 9;\r\n\r\n    const cellRenderer = React.useCallback(\r\n      ({\r\n        columnIndex,\r\n        rowIndex,\r\n        style,\r\n      }: {\r\n        columnIndex: number;\r\n        rowIndex: number;\r\n        style: React.CSSProperties;\r\n      }) => {\r\n        const index = rowIndex * COLUMNS + columnIndex;\r\n        if (index >= filteredIcons.length) return null;\r\n\r\n        const iconName = filteredIcons[index];\r\n\r\n        return (\r\n          <div style={style} key={iconName}>\r\n            <IconItem\r\n              iconName={iconName}\r\n              setSelectedIcon={setSelectedIcon}\r\n              selectedIcon={selectedIcon}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n      [filteredIcons, setSelectedIcon, selectedIcon],\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(\"w-72 bg-popover rounded-lg border shadow-md\", className)}\r\n        aria-label=\"Icon picker\"\r\n        {...props}\r\n      >\r\n        <div className=\"relative px-2 pt-2\">\r\n          <Input\r\n            autoComplete=\"off\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize=\"off\"\r\n            spellCheck={false}\r\n            className=\"border-none focus-visible:ring-2 font-semibold px-2.5 py-2\"\r\n            placeholder=\"Search...\"\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={handleSearchChange}\r\n            aria-label=\"Search icons\"\r\n          />\r\n        </div>\r\n        <div className=\"h-80 p-1.5\">\r\n          <AutoSizer>\r\n            {({ width, height }: { width: number; height: number }) => {\r\n              const rowCount = Math.ceil(filteredIcons.length / COLUMNS);\r\n              return (\r\n                <Grid\r\n                  ref={gridRef}\r\n                  cellRenderer={cellRenderer}\r\n                  columnCount={COLUMNS}\r\n                  columnWidth={ICON_CELL_SIZE}\r\n                  height={height}\r\n                  rowCount={rowCount}\r\n                  rowHeight={ICON_CELL_SIZE}\r\n                  width={width}\r\n                  overscanRowCount={10}\r\n                  className=\"focus:outline-none\"\r\n                  aria-label=\"Available icons\"\r\n                />\r\n              );\r\n            }}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nIconPicker.displayName = \"IconPicker\";\r\n\r\nexport default IconPicker;\r\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-debounce.ts",
      "content": "import * as React from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay || 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
      "type": "registry:hook"
    }
  ]
}